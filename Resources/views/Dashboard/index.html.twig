{% extends 'LiveVotingBundle::base.html.twig' %}

{% block title %}Dashboard|LiveVoting{% endblock %}

{% block stylesheets %}
    <style type="text/css">
        @keyframes fadeIn {
            0% {
                background-color: white;
                opacity: 0;
            }
            50% {
                background-color: green;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 1;
            }
        }

        @-webkit-keyframes fadeIn {
            0% {
                background-color: white;
                opacity: 0;
            }
            50% {
                background-color: green;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            0% {
                background-color: white;
                opacity: 1;
            }
            50% {
                background-color: red;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 0;
            }
        }

        @-webkit-keyframes fadeOut {
            0% {
                background-color: white;
                opacity: 1;
            }
            50% {
                background-color: red;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 0;
            }
        }

        .my-repeat-animation {
            margin: 10px;
            background-color: white;
        }

        .my-repeat-animation.ng-enter.ng-enter-active,
        .my-repeat-animation.ng-leave {
            -webkit-animation: fadeIn 3s linear;
            -moz-animation: fadeIn 3s linear;
            -o-animation: fadeIn 3s linear;
            animation: fadeIn 3s linear;
        }

        /* Remove animation */
        .my-repeat-animation.ng-leave.ng-leave-active,
        .my-repeat-animation.ng-enter {
            -webkit-animation: fadeOut 3s linear;
            -moz-animation: fadeOut 3s linear;
            -o-animation: fadeOut 3s linear;
            animation: fadeOut 3s linear;
        }
    </style>
{% endblock %}

{% block body %}
    <div id="page-wrapper" class="container-fluid">

        <div class="row heading">
            <div class="col-lg-8">
                <h1 class="page-header">DAY1- Aug 26</h1>
            </div>
        </div>
        <div class="row panels">
            <div class="col-lg-8 col-md-6 col-sm-8" id="liveschedule">
                <!--PANELS -->

            </div>

            <!--END OF EVENTS -->
            <!--TWITTER -->
            <div class=" col-lg-4 col-md-6  twitter ">
                <a class="twitter-timeline" href="https://twitter.com/hashtag/php" data-widget-id="619436153545039872">#php
                    Tweets</a>
                <script>!function (d, s, id) {
                        var js, fjs = d.getElementsByTagName(s)[0], p = /^http:/.test(d.location) ? 'http' : 'https';
                        if (!d.getElementById(id)) {
                            js = d.createElement(s);
                            js.id = id;
                            js.src = p + "://platform.twitter.com/widgets.js";
                            fjs.parentNode.insertBefore(js, fjs);
                        }
                    }(document, "script", "twitter-wjs");</script>
            </div>
        </div>
    </div>
    <!--END OF TWITTER -->

    <div id="container" style="margin-left:auto; margin-right:auto; width:98%; height:400px;">
    </div>
{% endblock %}

{% block javascripts %}
    <script type="text/javascript"
            src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/3.0.3/handlebars.min.js"></script>
    <script type="text/javascript" src="{{ asset('bundles/livevoting/js/handlebars-intl.min.js') }}" ></script>
    <script type="text/javascript">
        $(document).ready(function () {

            new brain({
                'STATES': {
                    'PRE': {'TIMEOUT': 0},
                    'ACTIVE': {'TIMEOUT': 0},
                    'POST': {'TIMEOUT': 0}
                },
                'URLS': {
                    'EVENT_STATUS': '/user/event_status/',
                    'VOTE': '/user/vote/'
                }
            });
        });
        function presentationsArray() {
            var arr = {};
            var notify = [];
            /*
             Adds new presentation if it's not there and change it's view if needs.
             */
            this.add = function (presentation) {
                var id = presentation['id'].toString();
                if (arr[id] === undefined) {
                    arr[id] = new presentationClass();
                    arr[id].init(presentation);
                }
                var status = arr[id].setData(presentation);
                if (status) {
                    notify.push(id);
                }
                arr[id].handle();
            };


            this.getById = function (id) {
                return arr[id];
            };

            this.setEnabledAll = function (state) {
                arr.forEach(function (presentation) {
                    presentation.setEnabled(false);
                    presentation.setVote(presentation.getData()['presenterRate']);
                });
            };

            this.notifiyAll = function () {

            }
        }

        /*
         Class presentation that holds one presentation and pointer to html element
         */
        function presentationClass() {

            var data = null;
            var that = this;
            this.element = null;

            this.init = function (newData) {
                this.setData(newData);
                this.element = $("#presentation-"+data['id']);
                this.element.find('.highLight').hide();
                this.element.find('.flash').hide();
                $("#voteScreen").append(this.element);
                this.element.find('.check').hide();
            };

            /*
             Returns true if user can now vote on it.
             */
            this.setData = function (newData) {
                var status = false;
                if (data == null) {
                    status = newData['votingEnabled'];
                } else if (newData['votingEnabled'] == true && data['votingEnabled'] == false) {
                    status = true;
                }
                delete data;
                data = newData;
                return status;
            };

            this.getData = function () {
                return data;
            };

            this.setVote = function (vote_number) {
                this.element.find('input[type=submit]').each(function () {
                    if (this.value == vote_number) {
                        $(this).addClass('active');
                    } else {
                        $(this).removeClass('active');
                    }
                });
            };


            this.setEnabled = function (enabled_status) {
                if (!enabled_status) // enabled_status == false
                    this.element.find('.highLight').fadeIn(2000);
                else
                    this.element.find('.highLight').fadeOut(1000);
            };

            this.highlightMe = function () {
                this.setEnabled(true);
            };

            this.handle = function () {
                if (data.votes != undefined && data.votes.length != 0) {
                    var vote = data.votes[0].rate;
                    this.setVote(vote);
                }
                this.setEnabled(data['votingEnabled']);
            }
        }

        function brain(options_) {

            var canIVote = true;
            presentations = new presentationsArray();

            Handlebars.registerHelper('ifCond', function (v1, v2, options) {
                if (v1 == v2) {
                    return options.fn(this);
                }
                return options.inverse(this);
            });
            HandlebarsIntl.registerWith(Handlebars);


            $('#liveschedule').on('change', '.forma', function (e) {
                e.preventDefault();
            });


            $('#liveschedule').on('click', '.forma input', function (e) {
                e.preventDefault();
                if (!canIVote)return;
                var action = $(this).parent().parent().attr('action');
                var presentation_id = action.split('/').pop();
                var presentation = presentations.getById(presentation_id);
                var vote = $(this).attr('value');
                var rate = 'rate=' + vote;
                $(e.target).parent(".btn-group").find('input[type=submit]').each(function () {
                    if (this.value == rate) {
                        $(this).addClass('active');
                    } else {
                        $(this).removeClass('active');
                    }
                });
                if(presentation.getData()['votingEnabled']==true){
                    $.ajax({
                        type: 'post',
                        'url': action,
                        'data': rate,
                        success: function (data) {

                        },
                        error: function (e) {
                        }
                    });
                }

            });

            var run = function () {
            };



            run();
        }

    </script>

    <script id="live-schedule-template" type="text/x-handlebars-template">
        <div class="panel">
            <div class="panel-heading">
                <div class="row">
                    <div class="col-lg-2 ">

                        <div class="imgpresenter">
                            <img class="pres-img" src="{{ asset('bundles/livevoting/img/') }}{% verbatim %}{{#if image}}presentations/{{image}}{{else}}assets/presenter.svg{{/if}}{% endverbatim %}">

                        </div>
                    </div>
                    <div id="presentation-{{ '{{ id }}' }}" class="col-lg-7 text-left">
                        <div class="prestitle my-repeat-animation">{{ '<div>{{presentationName}}</div>' }}
                        </div>
                        <div class="presname my-repeat-animation">{{ '<div>{{presenterName}} {{presenterSurname}}</div>' }}
                        </div>

                        <div class="vote">
                            {% if app.user %}
                                <form class="forma col-lg-12 col-md-12 col-sm-12 col-xs-12"
                                      action="{{ path('vote') }}/{{ '{{ id}}' }}" method="POST">

                                    {% verbatim %}
                                        {{#if votingEnabled }}
                                        <span class='glyphicon glyphicon-thumbs-down'></span>
                                        <div class="btn-group btn-group-lg">

                                            <input type="submit" class='btn btn-default btn-sm' value='1'/>
                                            <input type="submit" class='btn btn-default btn-sm' value='2'/>
                                            <input type="submit" class='btn btn-default btn-sm' value='3'/>
                                            <input type="submit" class='btn btn-default btn-sm' value='4'/>
                                            <input type="submit" class='btn btn-default btn-sm' value='5'/>

                                        </div>

                                        <span class='glyphicon glyphicon-thumbs-up'></span>
                                        <br>
                                        {{/if }}
                                    {% endverbatim %}

                                </form>
                            {% else %}
                                <a href="{{ path('user_landing') }}">
                                    <button type="button" class="btn btn-labeled btn-default">
                              <span class="btn-label">
                              <i class="glyphicon glyphicon-stats"></i>
                              </span>Vote
                                    </button>
                                </a>
                            {% endif %}
                        </div>

                    </div>

                    <div class="container2">
                        <div class="divider-vertical">
                            <div class="col-lg-3 time">
                                <div class="room">
                                  <span class="glyphicon glyphicon-blackboard" aria-hidden="true">
                                  </span><b>{{ '{{ hall }}' }}</b></div>
                                <div>{{ '{{formatTime begin hour="numeric" minute="numeric"  }}' }} - {{ '{{formatTime end hour="numeric" minute="numeric"  }}' }}</div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </script>

    <script type="text/javascript">
        var srcDiv = document.getElementById('liveschedule');
        var content = [];
        var divContent = [];
        var source = document.getElementById('live-schedule-template').innerHTML;
        var template = Handlebars.compile(source);

        $(document).ready(function () {
            var ajaxFunction = function () {
                $.ajax({
                    type: "GET",
                    url: '{{ path('dashboard_live_schedule') }}',
                    dataType: "json",
                    success: function (data) {
                        if ('presentations' in data) {
                            if (content.length === 0) {
                                for (var i = 0; i < data['presentations'].length; i++) {
                                    content.push(JSON.stringify(data['presentations'][i].id));
                                    console.log(data['presentations'][i]);
                                    data['presentations'][i].begin = new Date(data['presentations'][i].begin.date);
                                    data['presentations'][i].end = new Date(data['presentations'][i].end.date);
                                    html = template(data['presentations'][i]);
                                    newDiv = document.createElement('div');
                                    newDiv.innerHTML = html;
                                    divContent.push(srcDiv.appendChild(newDiv));
                                }
                                setInterval(ajaxFunction, 10000);
                            } else {
                                var givenData = [];
                                for (var k = 0; k < data['presentations'].length; k++) {
                                    givenData.push(JSON.stringify(data['presentations'][k].id));
                                }

                                for (var j = 0; j < content.length; j++) {
                                    if (givenData.indexOf(content[j]) === -1) {
                                        $(divContent[j]).fadeOut(2000, function () {
                                            this.remove();
                                        });
                                        content.splice(j, 1);
                                        divContent.splice(j, 1);
                                        j--;
                                    }
                                }

                                for (var j = 0; j < givenData.length; j++) {
                                    if (content.indexOf(givenData[j]) === -1) {
                                        content.push(givenData[j]);

                                        html = template(data['presentations'][j]);

                                        newDiv = document.createElement('div');
                                        newDiv.innerHTML = html;

                                        divContent.push(srcDiv.appendChild(newDiv));
                                        $(divContent[j]).hide();
                                        $(divContent[j]).fadeIn(2000);
                                    }
                                }
                            }
                            presentations = new presentationsArray();
                            data['presentations'].forEach(function (presentation) {
                                presentations.add(presentation);
                            });
                        }
                    }
                });
            };
            ajaxFunction();
        });
    </script>

    <script src="http://code.highcharts.com/highcharts.js"></script>

    <!-- Rendering charts -->
    <script type="text/javascript">
        var requestData, animation_data, chart;
        function cmp(v1, v2) {
            if (v1.presentationValue < v2.presentationValue)return 1;
            if (v1.presentationValue > v2.presentationValue)return -1;
            return 0;
        }
        function load(firstLoad) {
            $.getJSON('{{ path("dashboard_presentations") }}', function (data) {
                if ('presentations' in data) {
                    var sortMe = [], presentationNames = [], presentationValues = [];//, counter = 0;
                    for (var i in data['presentations']) {
                        var pres = {};
                        pres.presentationName = data['presentations'][i]['presentationName'];
                        // Check if page is not loaded. If yes set all values to zero so that chart animates
                        if (firstLoad === true) {
                            pres.presentationValue = 0;
                        } else {
                            pres.presentationValue = data['presentations'][i]['average'];
                        }
                        sortMe.push(pres);
                    }
                    sortMe.sort(cmp);
                    for (var i in sortMe) {
                        //if( counter < 3 ){
                        presentationNames.push(sortMe[i].presentationName);
                        presentationValues.push(sortMe[i].presentationValue);
                        //counter++;
                        //}
                    }
                    chart.xAxis[0].update({categories: presentationNames}, true);
                    chart.series[0].setData(presentationValues, true, true, true);
                }
                //Check if loaded page. If yes animate chart in 500 miliseconds
                if (firstLoad === true) {
                    setTimeout(load, 500);
                } else {
                    setTimeout(load, 5000);
                }
            });
        }
        $(document).ready(function () {
            chart = new Highcharts.Chart({
                chart: {
                    renderTo: 'container',
                    defaultSeriesType: 'column',
                    events: {
                        load: function () {
                            setTimeout(function () {
                                load(true)
                            }, 1000);
                        }
                    }
                },
                plotOptions: {
                    column: {
                        colorByPoint: true
                    }
                },
                //colors: ['#2f7ed8', '#0d233a', '#8bbc21', '#910000', '#1aadce',
                //    '#492970', '#f28f43', '#77a1e5', '#c42525', '#a6c96a'],
                title: {
                    text: 'Live results: Presentations'
                },
                xAxis: {
                    type: 'String',
                    tickPixelInterval: 5,
                    title: {
                        text: 'Presentations name'
                    }
                },
                yAxis: {
                    minPadding: 0.1,
                    maxPadding: 0.1,
                    tickmarkPlacement: 'on',
                    min: 0,
                    max: 5,
                    title: {
                        text: 'Average number of rating score'
                    }
                },
                series: [
                    {
                        showInLegend: false,
                        data: [],
                        dataLabels: {
                            enabled: true,
                            rotation: 0,
                            formatter: function () {
                                return this.y;
                            },
                            style: {
                                fontSize: '13px'
                            }
                        },
                        name: 'Average'
                    }]
            });
        });
    </script>
{% endblock %}
