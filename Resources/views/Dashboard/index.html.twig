{% extends 'LiveVotingBundle::base.html.twig' %}

{% block title %}Dashboard|LiveVoting{% endblock %}

{% block stylesheets %}
    <style type="text/css">
        @keyframes fadeIn {
            0% {
                background-color: white;
                opacity: 0;
            }
            50% {
                background-color: green;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 1;
            }
        }

        @-webkit-keyframes fadeIn {
            0% {
                background-color: white;
                opacity: 0;
            }
            50% {
                background-color: green;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            0% {
                background-color: white;
                opacity: 1;
            }
            50% {
                background-color: red;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 0;
            }
        }

        @-webkit-keyframes fadeOut {
            0% {
                background-color: white;
                opacity: 1;
            }
            50% {
                background-color: red;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 0;
            }
        }

        .my-repeat-animation {
            margin: 10px;
            background-color: white;
        }

        .my-repeat-animation.ng-enter.ng-enter-active,
        .my-repeat-animation.ng-leave {
            -webkit-animation: fadeIn 3s linear;
            -moz-animation: fadeIn 3s linear;
            -o-animation: fadeIn 3s linear;
            animation: fadeIn 3s linear;
        }

        /* Remove animation */
        .my-repeat-animation.ng-leave.ng-leave-active,
        .my-repeat-animation.ng-enter {
            -webkit-animation: fadeOut 3s linear;
            -moz-animation: fadeOut 3s linear;
            -o-animation: fadeOut 3s linear;
            animation: fadeOut 3s linear;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="row">
        <div class="col-xs-12 box light shadow text-shadow" style="background-image: url({{asset('bundles/livevoting/img/assets/master-event.png')}});">
          <div class="row vertical-align-xs">
            <div class="col-xs-4 col-sm-1 text-center garbage">
              <img class="image-full" src="{{asset('bundles/livevoting/img/assets/box-img.svg')}}">
            </div>
            <div class="col-xs-8 col-sm-6 col-lg-7 text-wrapper">
              <div>
                <h1>Current happenings:</h1>
              </div>
              <div>
                <label class="big">Summer Camp</label>
              </div>
            </div>
          </div>
        </div>
    </div>


    <div class="row" id="liveschedule"></div>

    <div class="row box shadow bg-pattern">
        <div id="chartContainer" class="col-xs-12 col-sm-8"></div>
        <div class="clearfix visible-xs"></div>
        <div class="col-xs-12 col-sm-4 twitter">
            <a class="twitter-timeline" href="https://twitter.com/hashtag/https://twitter.com/hashtag/netgentweets+OR+ezsummer+OR+phpsummer" data-widget-id="626365722931933184" data-chrome="noborders transparent noheader nofooter">#netgen #ezsummer #phpsummer
                Tweets</a>
            <script>!function (d, s, id) {
                    var js, fjs = d.getElementsByTagName(s)[0], p = /^http:/.test(d.location) ? 'http' : 'https';
                    if (!d.getElementById(id)) {
                        js = d.createElement(s);
                        js.id = id;
                        js.src = p + "://platform.twitter.com/widgets.js";
                        fjs.parentNode.insertBefore(js, fjs);
                    }
                }(document, "script", "twitter-wjs");</script>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script type="text/javascript"
            src="https://cdnjs.cloudflare.com/ajax/libs/handlebars.js/3.0.3/handlebars.min.js"></script>
    <script type="text/javascript" src="{{ asset('bundles/livevoting/js/handlebars-intl.min.js') }}" ></script>
    <script type="text/javascript">
        var eventNameHighchart = "Presentations";

        $(document).ready(function () {

            new brain({
                'STATES': {
                    'PRE': {'TIMEOUT': 0},
                    'ACTIVE': {'TIMEOUT': 0},
                    'POST': {'TIMEOUT': 0}
                },
                'URLS': {
                    'EVENT_STATUS': '/user/event_status/',
                    'VOTE': '/user/vote/'
                }
            });
        });
        function presentationsArray() {
            var arr = {};
            var notify = [];
            /*
             Adds new presentation if it's not there and change it's view if needs.
             */
            this.add = function (presentation) {
                var id = presentation['id'].toString();
                if (arr[id] === undefined) {
                    arr[id] = new presentationClass();
                    arr[id].init(presentation);
                }
                var status = arr[id].setData(presentation);
                if (status) {
                    notify.push(id);
                }
                arr[id].handle();
            };

            this.isEmpty = function() {
                return arr;
            };


            this.getById = function (id) {
                return arr[id];
            };

            this.setEnabledAll = function (state) {
                arr.forEach(function (presentation) {
                    presentation.setEnabled(false);
                    presentation.setVote(presentation.getData()['presenterRate']);
                });
            };

            this.notifiyAll = function () {

            }
        }

        /*
         Class presentation that holds one presentation and pointer to html element
         */
        function presentationClass() {

            var data = null;
            var that = this;
            this.element = null;

            this.init = function (newData) {
                this.setData(newData);
                this.element = $("#presentation-"+data['id']);
                this.element.find('.highLight').hide();
                this.element.find('.flash').hide();
                $("#voteScreen").append(this.element);
                this.element.find('.check').hide();
            };

            /*
             Returns true if user can now vote on it.
             */
            this.setData = function (newData) {
                var status = false;
                if (data == null) {
                    status = newData['votingEnabled'];
                } else if (newData['votingEnabled'] == true && data['votingEnabled'] == false) {
                    status = true;
                }
                delete data;
                data = newData;
                return status;
            };

            this.getData = function () {
                return data;
            };

            this.getVote = function () {
                return this.element.find('input[type=submit] .active').first().val();
            };

            this.setVote = function (vote_number) {
                this.element.find('input[type=submit]').each(function () {
                    if (this.value == vote_number) {
                        $(this).addClass('active');
                    } else {
                        $(this).removeClass('active');
                    }
                });
            };


            this.setEnabled = function (enabled_status) {
                if (!enabled_status) // enabled_status == false
                    this.element.find('.highLight').fadeIn(2000);
                else
                    this.element.find('.highLight').fadeOut(1000);
            };

            this.highlightMe = function () {
                this.setEnabled(true);
            };

            this.handle = function () {
                if (data.votes != undefined && data.votes.length != 0) {
                    var vote = data.votes[0].rate;
                    this.setVote(vote);
                }
                this.setEnabled(data['votingEnabled']);
            }
        }

        function brain(options_) {

            var canIVote = true;
            var body = $('body');
            presentations = new presentationsArray();

            Handlebars.registerHelper('ifCond', function (v1, v2, options) {
                if (v1 == v2) {
                    return options.fn(this);
                }
                return options.inverse(this);
            });
            HandlebarsIntl.registerWith(Handlebars);


            body.on('change', '.question-multiple', function (e) {
                e.preventDefault();
            });


            body.on('click', '.vote-option', function (e) {
                e.preventDefault();
                if (!canIVote)return;
                var action = $(this).closest('form').attr('action');
                var presentation_id = action.split('/').pop();
                var presentation = presentations.getById(presentation_id);
                var old_vote = presentation.getVote();
                var vote = $(this).attr('value');
                var rate = 'rate=' + vote;
                presentation.setVote(vote);
                if(presentation.getData()['votingEnabled']==true){
                    $.ajax({
                        type: 'post',
                        'url': action,
                        'data': rate,
                        success: function (data) {

                        },
                        error: function (e) {
                            presentation.setVote(old_vote);
                        }
                    });
                }
            });

            var run = function () {
            };

            run();
        }

    </script>
    <script id="live-schedule-template" type="text/x-handlebars-template">
        <div class="col-xs-12 col-sm-4 box shadow" id="presentation-{{ '{{ id }}' }}">
            <div class="row">
                <div class="col-xs-4">
                    <div class="row">
                        <div class="col-xs-12">
                            <img class="image image-o" src="{{ asset('bundles/livevoting/img/') }}{% verbatim %}{{#if image}}presentations/{{image}}{{else}}assets/angry-che.png{{/if}}{% endverbatim %}">
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-xs-12 box-margin text-center">
                            <label class="text-strong">{{ '{{ hall }}' }}</label>
                            <p>{{ '{{formatTime begin hour="numeric" minute="numeric"  }}' }}</p>
                            <p>{{ '{{formatTime end hour="numeric" minute="numeric"  }}' }}</p>
                        </div>
                    </div>
                </div>
                <div class="col-xs-8 box-padding">
                    <h4>{{'{{presentationName}}'}}</h4>
                    <label>{{'{{presenterName}}'}} {{'{{presenterSurname}}'}}</label>
                </div>
            </div>            
            <div class="row">
                <div class="col-xs-12">
                {% if app.user %}
                    <form class="question-multiple cta cta-multiple shadow bg-pattern text-shadow {% verbatim %}{{#if votingEnabled }}{{else}}cta-disabled{{/if}}{% endverbatim %}" action="{{ path('vote', {presentation_id:''}) }}/{{ '{{ id}}' }}" method="POST">
                        <input class="cta-action vote-option q5" type="submit" value='5'/><!--
                        --><input class="cta-action vote-option q4" type="submit" value='4'/><!--
                        --><input class="cta-action vote-option q3" type="submit" value='3'/><!--
                        --><input class="cta-action vote-option q2" type="submit" value='2'/><!--
                        --><input class="cta-action vote-option q1" type="submit" value='1'/>
                    </form>
                {% else %}
                    <div class="cta shadow bg-pattern text-shadow">
                        <a class="cta-action" href="{{ path('user_landing') }}">Vote</a>
                    </div>
                {% endif %}
                </div>
            </div>
        </div>
    </script>
    <script id="global-brake-template" type="text/x-handlebars-template" >
        <div id="presentation-{{ '{{ id }}' }}" class="col-xs-12 box light shadow text-shadow" style="background-image: url({{asset('bundles/livevoting/img/assets/lunch.png')}});">
            <div class="row vertical-align-xs">
                <div class="col-xs-4 col-sm-1 text-center garbage icon">
                    <i class="fa fa-cutlery"></i>
                </div>
                <div class="col-xs-8 col-sm-6 col-lg-7 text-wrapper">
                    <div>
                        <h1>{{'{{presentationName}}'}}</h1>
                    </div>
                    <div>
                        <label class="big">{{ '{{formatTime begin hour="numeric" minute="numeric"  }}' }} - {{ '{{formatTime end hour="numeric" minute="numeric"  }}' }}</label>
                    </div>
                </div>
            </div>
        </div>
    </script>
    <script type="text/javascript">
        var srcDiv = '#liveschedule';
        var displayedPresentations = [];
        var presentation_template_html = document.getElementById('live-schedule-template').innerHTML;
        var global_brake_template_html = document.getElementById('global-brake-template').innerHTML;
        var presentation_template = Handlebars.compile(presentation_template_html);
        var global_brake_tempalte = Handlebars.compile(global_brake_template_html);

        function presentationInArray(presentation, presentationArray) {
            var equals = false;
            $.each(presentationArray, function(key, p) {
                if(pequals(p, presentation)) {
                    equals = true;
                    return false;
                }
            });
            return equals;
        }

        function pequals(p, presentation) {
            console.log("Comparing");
            console.log(p);
            console.log(presentation);
            if(p.id != presentation.id) return false;
            if(p.globalBrake != presentation.globalBrake) return false;
            if(p.begin != presentation.begin) return false;
            if(p.end != presentation.end) return false;
            if(p.presentationName != presentation.presentationName) return false;
            return true;
        }

        $(document).ready(function () {
            var ajaxFunction = function () {
                $.ajax({
                    type: "GET",
                    url: '{{ path('dashboard_live_schedule') }}',
                    dataType: "json",
                    success: function (data) {
                        if('presentations' in data) {
                            console.log("Number of displayed presentations "+displayedPresentations.length);
                            if(displayedPresentations.length == 0) {
                                var result = $.grep(data.presentations, function(e){
                                    return e.globalBrake;
                                });
                                if(result.length == 0) {
                                    data['presentations'].forEach(function (presentation) {
                                        $(presentation_template(presentation)).hide().appendTo(srcDiv).fadeIn(1500);
                                        displayedPresentations.push(presentation);
                                    });
                                } else {
                                    $(global_brake_tempalte(result[0])).hide().appendTo(srcDiv).fadeIn(1500);
                                    displayedPresentations.push(result[0]);
                                }
                                setInterval(ajaxFunction, 10000);
                            } else {
                                //searching for global brake presentation
                                var result = $.grep(data.presentations, function(e){
                                    return e.globalBrake;
                                });
                                if(result.length == 0) {
                                    //no global brake presentation
                                    //removing expired presentations
                                    displayedPresentations.forEach(function(displayed_presentation, index, array) {
                                       if(!presentationInArray(displayed_presentation, data.presentations)) {
                                           console.log("Removing");
                                           console.log(displayed_presentation);
                                           $('#presentation-'+displayed_presentation.id).remove();
                                           array.splice(index, 1);
                                       }
                                    });
                                    //adding presentations scheduled next
                                    data.presentations.forEach(function(presentation) {
                                        if(!presentationInArray(presentation, displayedPresentations)) {
                                            console.log("Adding");
                                            console.log(presentation);
                                            $(presentation_template(presentation)).hide().appendTo(srcDiv).fadeIn(1500);
                                            displayedPresentations.push(presentation);
                                        }
                                    });
                                } else {
                                    if(!presentationInArray(result[0], displayedPresentations)) {
                                        $(srcDiv).empty();
                                        displayedPresentations = [];
                                        $(global_brake_tempalte(result[0])).hide().appendTo(srcDiv).fadeIn(1500);
                                        displayedPresentations.push(result[0]);
                                    }
                                }
                            }
                            presentations = new presentationsArray();
                            data['presentations'].forEach(function (presentation) {
                                presentations.add(presentation);
                            });
                        }
                    }
                });
            };
            ajaxFunction();
        });
    </script>
    <script src="http://code.highcharts.com/highcharts.js"></script>
    <!-- Rendering charts -->
    <script type="text/javascript">
        var requestData, animation_data, chart;
        function cmp(v1, v2) {
            if (v1.presentationValue < v2.presentationValue)return 1;
            if (v1.presentationValue > v2.presentationValue)return -1;
            return 0;
        }
        function load(firstLoad) {
            $.getJSON('{{ path("dashboard_presentations") }}', function (data) {
                if ('presentations' in data) {
                    var sortMe = [], presentationNames = [], presentationValues = [];//, counter = 0;
                    for (var i in data['presentations']) {
                        var pres = {};
                        pres.presentationName = data['presentations'][i]['presentationName'];
                        // Check if page is not loaded. If yes set all values to zero so that chart animates
                        if (firstLoad === true) {
                            pres.presentationValue = 0;
                        } else {
                            pres.presentationValue = data['presentations'][i]['average'];
                        }
                        sortMe.push(pres);
                    }
                    sortMe.sort(cmp);
                    for (var i in sortMe) {
                        //if( counter < 3 ){
                        presentationNames.push(sortMe[i].presentationName);
                        presentationValues.push(sortMe[i].presentationValue);
                        //counter++;
                        //}
                    }
                    chart.xAxis[0].update({categories: presentationNames}, true);
                    chart.series[0].setData(presentationValues, true, true, true);
                }
                //Check if loaded page. If yes animate chart in 500 miliseconds
                if (firstLoad === true) {
                    setTimeout(load, 500);
                } else {
                    setTimeout(load, 5000);
                }
            });
        }
    </script>
    <script src="{{ asset('bundles/livevoting/js/highcharts.custom.js') }}"></script>
{% endblock %}
