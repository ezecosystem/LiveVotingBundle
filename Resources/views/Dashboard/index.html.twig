{% extends 'LiveVotingBundle::base.html.twig' %}

{% block title %}Dashboard|LiveVoting{% endblock %}

{% block stylesheets %}
    <style type="text/css">
        @keyframes fadeIn {
            0% {
                background-color: white;
                opacity: 0;
            }
            50% {
                background-color: green;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 1;
            }
        }

        @-webkit-keyframes fadeIn {
            0% {
                background-color: white;
                opacity: 0;
            }
            50% {
                background-color: green;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 1;
            }
        }

        @keyframes fadeOut {
            0% {
                background-color: white;
                opacity: 1;
            }
            50% {
                background-color: red;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 0;
            }
        }

        @-webkit-keyframes fadeOut {
            0% {
                background-color: white;
                opacity: 1;
            }
            50% {
                background-color: red;
                opacity: 0.5;
            }
            100% {
                background-color: white;
                opacity: 0;
            }
        }

        .my-repeat-animation {
            margin: 10px;
            background-color: white;
        }

        .my-repeat-animation.ng-enter.ng-enter-active,
        .my-repeat-animation.ng-leave {
            -webkit-animation: fadeIn 3s linear;
            -moz-animation: fadeIn 3s linear;
            -o-animation: fadeIn 3s linear;
            animation: fadeIn 3s linear;
        }

        /* Remove animation */
        .my-repeat-animation.ng-leave.ng-leave-active,
        .my-repeat-animation.ng-enter {
            -webkit-animation: fadeOut 3s linear;
            -moz-animation: fadeOut 3s linear;
            -o-animation: fadeOut 3s linear;
            animation: fadeOut 3s linear;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="row box shadow bg-pattern">
        <div id="chartContainer" class="col-xs-12 col-sm-8"></div>
        <div class="clearfix visible-xs"></div>
        <div class="col-xs-12 col-sm-4 twitter">
          <a class="twitter-timeline" data-dnt="true" href="https://twitter.com/search?q=%23websc%20OR%20%23websummercamp" data-widget-id="349862392949260289">Tweets about #websc OR #websummercamp</a>
         <script>!function(d,s,id){var js,fjs=d.getElementsByTagName(s)[0],p=/^http:/.test(d.location)?'http':'https';if(!d.getElementById(id)){js=d.createElement(s);js.id=id;js.src=p+"://platform.twitter.com/widgets.js";fjs.parentNode.insertBefore(js,fjs);}}(document,"script","twitter-wjs");</script>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    <script src="https://cdn.polyfill.io/v2/polyfill.min.js"></script>
    {#<script src="https://cdn.polyfill.io/v1/polyfill.min.js"></script>#}
    <script type="text/javascript" src="{{ asset('bundles/livevoting/js/handlebars/dist/handlebars.min.js') }}" ></script>
    <script type="text/javascript" src="{{ asset('bundles/livevoting/js/handlebars-intl/dist/handlebars-intl.min.js') }}" ></script>
    <script type="text/javascript">
        $('.footer-wrapper').hide();

        var eventNameHighchart = "Top 3 rated sessions";

        $(document).ready(function () {

            new brain({
                'STATES': {
                    'PRE': {'TIMEOUT': 0},
                    'ACTIVE': {'TIMEOUT': 0},
                    'POST': {'TIMEOUT': 0}
                },
                'URLS': {
                    'EVENT_STATUS': '/user/event_status/',
                    'VOTE': '/user/vote/'
                }
            });
        });
        function presentationsArray() {
            var arr = {};
            var notify = [];
            /*
             Adds new presentation if it's not there and change it's view if needs.
             */
            this.add = function (presentation) {
                var id = presentation['id'].toString();
                if (arr[id] === undefined) {
                    arr[id] = new presentationClass();
                    arr[id].init(presentation);
                }
                var status = arr[id].setData(presentation);
                if (status) {
                    notify.push(id);
                }
                arr[id].handle();
            };

            this.isEmpty = function() {
                return arr;
            };


            this.getById = function (id) {
                return arr[id];
            };

            this.setEnabledAll = function (state) {
                arr.forEach(function (presentation) {
                    presentation.setEnabled(false);
                    presentation.setVote(presentation.getData()['presenterRate']);
                });
            };

            this.notifiyAll = function () {

            }
        }

        /*
         Class presentation that holds one presentation and pointer to html element
         */
        function presentationClass() {

            var data = null;
            var that = this;
            this.element = null;

            this.init = function (newData) {
                this.setData(newData);
                this.element = $("#presentation-"+data['id']);
                this.element.find('.highLight').hide();
                this.element.find('.flash').hide();
                $("#voteScreen").append(this.element);
                this.element.find('.check').hide();
            };

            /*
             Returns true if user can now vote on it.
             */
            this.setData = function (newData) {
                var status = false;
                if (data == null) {
                    status = newData['votingEnabled'];
                } else if (newData['votingEnabled'] == true && data['votingEnabled'] == false) {
                    status = true;
                }
                delete data;
                data = newData;
                return false;
            };

            this.getData = function () {
                return data;
            };

            this.getVote = function () {
                return this.element.find('input[type=submit] .active').first().val();
            };

            this.setVote = function (vote_number) {
                this.element.find('input[type=submit]').each(function () {
                    if (this.value == vote_number) {
                        $(this).addClass('active');
                    } else {
                        $(this).removeClass('active');
                    }
                });
                this.element.find('.vote-option').each(function () {
                    if (this.value == vote_number) {
                        $(this).addClass('active').prevAll().addClass('active');
                    } else {
                        $(this).removeClass('active');
                    }
                });
            };


            this.setEnabled = function (enabled_status) {
                if (!enabled_status) // enabled_status == false
                    this.element.find('.highLight').fadeIn(2000);
                else
                    this.element.find('.highLight').fadeOut(1000);
            };

            this.highlightMe = function () {
                this.setEnabled(true);
            };

            this.handle = function () {
                if (data.votes != undefined && data.votes.length != 0) {
                    var vote = data.votes[0].rate;
                    this.setVote(vote);
                }
                this.setEnabled(data['votingEnabled']);
            }
        }

        function brain(options_) {

            var canIVote = true;
            var body = $('body');
            presentations = new presentationsArray();

            Handlebars.registerHelper('ifCond', function (v1, v2, options) {
                if (v1 == v2) {
                    return options.fn(this);
                }
                return options.inverse(this);
            });
            HandlebarsIntl.registerWith(Handlebars);


            body.on('change', '.question-multiple', function (e) {
                e.preventDefault();
            });


            body.on('click', '.vote-option', function (e) {
                e.preventDefault();
                if (!canIVote)return;
                if($(this).closest('form').hasClass("cta-disabled")) return;
                var action = $(this).closest('form').attr('action');
                var presentation_id = action.split('/').pop();
                var presentation = presentations.getById(presentation_id);
                var old_vote = presentation.getVote();
                var vote = $(this).attr('value');
                var rate = 'rate=' + vote;
                presentation.setVote(vote);
                if(presentation.getData()['votingEnabled']==true){
                    $.ajax({
                        type: 'post',
                        'url': action,
                        'data': rate,
                        success: function (data) {

                        },
                        error: function (e) {
                            presentation.setVote(old_vote);
                        }
                    });
                }
            });

            var run = function () {
            };

            run();
        }

    </script>
    <script src="http://code.highcharts.com/highcharts.js"></script>
    <!-- Rendering charts -->
    <script type="text/javascript">
        var requestData, animation_data, chart;
        function cmp(v1, v2) {
            if (v1.presentationValue < v2.presentationValue)return 1;
            if (v1.presentationValue > v2.presentationValue)return -1;
            return 0;
        }
        function load(firstLoad) {
            $.getJSON('{{ path("dashboard_presentations") }}', function (data) {
                if ('presentations' in data) {
                    var sortMe = [], presentationNames = [], presentationValues = [];//, counter = 0;
                    for (var i in data['presentations']) {
                        var pres = {};
                        pres.presentationName = data['presentations'][i]['presentationName'];
                        // Check if page is not loaded. If yes set all values to zero so that chart animates
                        if (firstLoad === true) {
                            pres.presentationValue = 0;
                        } else {
                            pres.presentationValue = data['presentations'][i]['average'];
                        }
                        sortMe.push(pres);
                    }
                    sortMe.sort(cmp);
                    for (var i in sortMe) {
                        //if( counter < 3 ){
                        presentationNames.push(sortMe[i].presentationName);
                        presentationValues.push(sortMe[i].presentationValue);
                        //counter++;
                        //}
                    }
                    chart.xAxis[0].update({categories: presentationNames}, true);
                    chart.series[0].setData(presentationValues, true, true, true);
                }
                //Check if loaded page. If yes animate chart in 500 miliseconds
                if (firstLoad === true) {
                    setTimeout(load, 500);
                } else {
                    setTimeout(load, 5000);
                }
            });
        }
    </script>
    <script src="{{ asset('bundles/livevoting/js/highcharts.custom.js') }}"></script>
{% endblock %}
